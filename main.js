"use strict";var f=Object.defineProperty;var b=(g,l,e)=>l in g?f(g,l,{enumerable:!0,configurable:!0,writable:!0,value:e}):g[l]=e;var p=(g,l,e)=>b(g,typeof l!="symbol"?l+"":l,e);const h=require("obsidian");class x{constructor(l,e,t){p(this,"app");p(this,"inputEl");p(this,"dropdown",null);p(this,"allFolders",[]);p(this,"onSelect");this.app=l,this.inputEl=e,this.onSelect=t,this.allFolders=this.getFolders(),this.inputEl.addEventListener("focus",()=>this.showSuggestions()),this.inputEl.addEventListener("input",()=>this.updateSuggestions()),this.inputEl.addEventListener("blur",()=>{setTimeout(()=>this.hideSuggestions(),200)})}getFolders(){const l=[],e=this.app.vault.getRoot();return this.collectFolders(e,l),l}collectFolders(l,e){e.push(l.path);for(const t of l.children)t instanceof h.TFolder&&this.collectFolders(t,e)}showSuggestions(){this.dropdown&&this.dropdown.remove(),this.dropdown=document.createElement("div"),this.dropdown.classList.add("suggestion-dropdown"),this.dropdown.style.position="absolute",this.dropdown.style.zIndex="1000",this.dropdown.style.backgroundColor="white",this.dropdown.style.border="1px solid #ccc",this.dropdown.style.padding="5px",this.dropdown.style.maxHeight="200px",this.dropdown.style.overflowY="auto";const l=this.inputEl.getBoundingClientRect();this.dropdown.style.top=`${l.bottom+window.scrollY}px`,this.dropdown.style.left=`${l.left+window.scrollX}px`,this.dropdown.style.width=`${l.width}px`,document.body.appendChild(this.dropdown),this.updateSuggestions()}updateSuggestions(){if(!this.dropdown)return;this.dropdown.innerHTML="";const l=this.inputEl.value.toLowerCase(),e=this.allFolders.filter(t=>t.toLowerCase().includes(l));if(e.forEach(t=>{const s=document.createElement("div");s.classList.add("suggestion-item"),s.textContent=t,s.style.padding="5px",s.style.cursor="pointer",s.addEventListener("click",()=>{this.inputEl.value=t,this.onSelect(t),this.hideSuggestions()}),s.addEventListener("mouseover",()=>{s.style.backgroundColor="#f0f0f0"}),s.addEventListener("mouseout",()=>{s.style.backgroundColor="white"}),this.dropdown.appendChild(s)}),e.length===0){const t=document.createElement("div");t.textContent="No results",t.style.padding="5px",t.style.color="#888",this.dropdown.appendChild(t)}}hideSuggestions(){this.dropdown&&(this.dropdown.remove(),this.dropdown=null)}}const E={inboxFolder:"_Inbox",interval:null,convertExtensionsToLowercase:!1,rules:[{regex:"",fileExtensions:"",rootFolder:"",folderStructure:"YYYY/YYYY-MM"}]};class S extends h.PluginSettingTab{constructor(e,t){super(e,t);p(this,"plugin");this.plugin=t}display(){const{containerEl:e}=this;e.empty(),e.createEl("h2",{text:"Inbox Processor Settings"}),this.addInboxFolderSetting(e),this.addIntervalSetting(e),this.addConvertExtensionsSetting(e),e.createEl("h3",{text:"Rules"}),this.addRulesTable(e),e.createEl("hr"),this.addWebsiteSection(e),this.addCoffeeSection(e)}addInboxFolderSetting(e){new h.Setting(e).setName("Inbox Folder").setDesc("Set the location of the inbox folder.").addText(t=>{t.setPlaceholder("Enter folder name").setValue(this.plugin.settings.inboxFolder||"_Inbox").onChange(async s=>{this.plugin.settings.inboxFolder=s,await this.plugin.saveSettings()}),new x(this.app,t.inputEl,async s=>{this.plugin.settings.inboxFolder=s,await this.plugin.saveSettings()})})}addIntervalSetting(e){new h.Setting(e).setName("Interval (seconds)").setDesc("Set the interval for processing the inbox folder. Leave empty to disable automatic processing.").addText(t=>t.setPlaceholder("Enter interval in seconds").setValue(this.plugin.settings.interval?this.plugin.settings.interval.toString():"").onChange(async s=>{this.plugin.settings.interval=s?parseInt(s):null,await this.plugin.saveSettings()}))}addConvertExtensionsSetting(e){new h.Setting(e).setName("Convert Extensions to Lowercase").setDesc("Enable this to convert uppercase file extensions to lowercase.").addToggle(t=>t.setValue(this.plugin.settings.convertExtensionsToLowercase).onChange(async s=>{this.plugin.settings.convertExtensionsToLowercase=s,await this.plugin.saveSettings()}))}addRulesTable(e){const t=e.createEl("div",{cls:"rules-table"});t.createEl("div",{text:"Location",cls:"rules-header"}),t.createEl("div",{text:"Structure",cls:"rules-header"}),t.createEl("div",{text:"Extensions",cls:"rules-header"}),t.createEl("div",{text:"Pattern",cls:"rules-header"}),t.createEl("div",{text:"Controls",cls:"rules-header"}),this.plugin.settings.rules.forEach((n,i)=>{const o=t.createEl("div",{cls:"rules-row"}),r=o.createEl("div",{cls:"rules-column"}).createEl("input",{type:"text",value:n.rootFolder});r.onchange=async()=>{this.plugin.settings.rules[i].rootFolder=r.value,await this.plugin.saveSettings()},new x(this.app,r,async c=>{this.plugin.settings.rules[i].rootFolder=c,await this.plugin.saveSettings()});const d=o.createEl("div",{cls:"rules-column"});this.createInputField(d,n.folderStructure,async c=>{this.plugin.settings.rules[i].folderStructure=c,await this.plugin.saveSettings()});const v=o.createEl("div",{cls:"rules-column"});this.createInputField(v,n.fileExtensions,async c=>{this.plugin.settings.rules[i].fileExtensions=c,await this.plugin.saveSettings()});const a=o.createEl("div",{cls:"rules-column"});this.createInputField(a,n.regex,async c=>{this.plugin.settings.rules[i].regex=c,await this.plugin.saveSettings()});const w=o.createEl("div",{cls:"rules-column-actions"});this.createRuleActions(w,i),t.appendChild(o)});const s=e.createEl("button",{text:"Add Rule",cls:"rules-add-button"});s.onclick=async()=>{this.plugin.settings.rules.push({regex:"",fileExtensions:"",rootFolder:"",folderStructure:""}),await this.plugin.saveSettings(),this.display()}}createRuleRow(e,t,s){const n=e.createEl("div",{cls:"rules-row"}),o=n.createEl("div",{cls:"rules-column"}).createEl("input",{type:"text",value:t.rootFolder});o.onchange=async()=>{this.plugin.settings.rules[s].rootFolder=o.value,await this.plugin.saveSettings()},new x(this.app,o,async a=>{this.plugin.settings.rules[s].rootFolder=a,await this.plugin.saveSettings()});const u=n.createEl("div",{cls:"rules-column"});this.createInputField(u,t.folderStructure,async a=>{this.plugin.settings.rules[s].folderStructure=a,await this.plugin.saveSettings()});const r=n.createEl("div",{cls:"rules-column"});this.createInputField(r,t.fileExtensions,async a=>{this.plugin.settings.rules[s].fileExtensions=a,await this.plugin.saveSettings()});const d=n.createEl("div",{cls:"rules-column"});this.createInputField(d,t.regex,async a=>{this.plugin.settings.rules[s].regex=a,await this.plugin.saveSettings()});const v=n.createEl("div",{cls:"rules-column-actions"});this.createRuleActions(v,s),e.appendChild(n)}createInputField(e,t,s){const n=e.createEl("input",{type:"text",value:t});n.onchange=async()=>{await s(n.value)}}createRuleActions(e,t){const s=e.createEl("button",{text:"↑",cls:"rules-button"});s.onclick=async()=>{if(t>0){const o=this.plugin.settings.rules[t];this.plugin.settings.rules[t]=this.plugin.settings.rules[t-1],this.plugin.settings.rules[t-1]=o,await this.plugin.saveSettings(),this.display()}};const n=e.createEl("button",{text:"↓",cls:"rules-button"});n.onclick=async()=>{if(t<this.plugin.settings.rules.length-1){const o=this.plugin.settings.rules[t];this.plugin.settings.rules[t]=this.plugin.settings.rules[t+1],this.plugin.settings.rules[t+1]=o,await this.plugin.saveSettings(),this.display()}};const i=e.createEl("button",{cls:"rules-button"});i.innerHTML="🗑️",i.onclick=async()=>{this.plugin.settings.rules.splice(t,1),await this.plugin.saveSettings(),this.display()}}addWebsiteSection(e){const t=e.createEl("div",{cls:"website-section"});t.style.display="flex",t.style.alignItems="center",t.style.marginTop="20px",t.style.marginBottom="20px",t.style.padding="0.5rem",t.style.opacity="0.75";const s=t.createEl("a",{href:"https://jots.life",target:"_blank"}),n=s.createEl("img",{attr:{src:"https://jots.life/jots-logo-512/",alt:"JOTS Logo"}});n.style.width="64px",n.style.height="64px",n.style.marginRight="15px",t.appendChild(s);const i=t.createEl("div",{cls:"website-description"});i.innerHTML=`
            While Inbox Processor works on its own, it is part of a system called 
            <a href="https://jots.life" target="_blank">JOTS</a> that helps capture, organize, 
            and visualize your life's details.
        `,i.style.fontSize="14px",i.style.lineHeight="1.5",i.style.color="#555",t.appendChild(i),e.appendChild(t)}addCoffeeSection(e){const t=e.createEl("div",{cls:"buy-me-a-coffee"});t.style.marginTop="20px",t.style.textAlign="center",t.innerHTML=`
            <a href="https://www.buymeacoffee.com/n7Rd8LVmR9" target="_blank">
                <img 
                    src="https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" 
                    alt="Buy Me A Coffee" 
                    style="height: 60px; width: 217px;"
                />
            </a>
        `,e.appendChild(t)}}class F extends h.Plugin{constructor(){super(...arguments);p(this,"settings")}async onload(){console.log("Inbox Processor: Loading plugin"),await this.loadSettings(),this.addSettingTab(new S(this.app,this));const e=this.getInterval();e!==null&&this.registerInterval(window.setInterval(()=>this.processInbox(),e)),this.addCommand({id:"process-inbox-manually",name:"Process Inbox Manually",callback:()=>this.processInbox()})}onunload(){console.log("Inbox Processor: Unloading plugin"),clearInterval(this.interval)}getInterval(){return this.settings.interval!==null?this.settings.interval*1e3:null}async loadSettings(){const e=await this.loadData();this.settings=Object.assign({},E,e)}async saveSettings(){await this.saveData(this.settings)}async processInbox(){const e=this.settings.inboxFolder;try{const t=this.app.vault.getAbstractFileByPath(e);if(t&&t.children){const s=t.children;for(let n of s)if(n instanceof h.TFile)for(const i of this.settings.rules){const o=new RegExp(`\\.(${i.fileExtensions})$`,"i"),u=i.regex?new RegExp(`${i.regex}.*`,"i"):null;if(o.test(n.name)&&(!u||u.test(n.name.replace(/\.[^/.]+$/,"")))){if(this.settings.convertExtensionsToLowercase){const r=n.name.replace(/\.[^/.]+$/,d=>d.toLowerCase());if(r!==n.name){const d=`${n.parent.path}/${r}`;await this.app.vault.rename(n,d),n=this.app.vault.getAbstractFileByPath(d)}}await this.moveFile(n,i.rootFolder,i.folderStructure,i.regex);break}}}else console.log("Inbox folder is empty or does not exist.")}catch(t){console.error("Error processing inbox:",t)}}async moveFile(e,t,s,n){if(!s){const y=`${t}/${e.name}`;await this.app.vault.adapter.exists(y)?console.log(`File already exists at "${y}"`):(await this.app.vault.rename(e,y),console.log(`"${e.name}" moved to "${t}"`));return}const i=this.extractDateFromFileName(e.name,n),o=i.getFullYear(),u=o.toString().slice(-2),r=i.getMonth()+1,d=["January","February","March","April","May","June","July","August","September","October","November","December"],v=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];let a;s.includes("MMMM")?a=d[r-1]:s.includes("MMM")?a=v[r-1]:s.includes("MM")?a=r.toString().padStart(2,"0"):a=r.toString();let w=s.includes("YYYY")?o.toString():u;const c=`${t}/${s.replace(/YYYY/g,w).replace(/YY/g,u).replace(/M{1,4}/,a)}`;this.app.vault.getAbstractFileByPath(c)||await this.app.vault.createFolder(c);const m=`${c}/${e.name}`;await this.app.vault.adapter.exists(m)?console.log(`File already exists at "${m}"`):(await this.app.vault.rename(e,m),console.log(`"${e.name}" moved to "${c}"`))}extractDateFromFileName(e,t){const s=e.match(t);if(s){const n=s[0].split(" ")[0],i=parseInt(n.substring(0,4),10),o=parseInt(n.substring(4,6),10)-1,u=parseInt(n.substring(6,8),10);return new Date(i,o,u)}return null}}module.exports=F;
